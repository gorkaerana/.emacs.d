
#+TITLE: Literate emacs init
#+AUTHOR: Gorka Eraña
#+EMAIL: eranagorka@gmail.com
#+DATE: <2022-04-25 ma>
#+CREATED: 2021-05-12
#+STARTUP: hidestars indent overview
#+PROPERTY: header-args :results silent :tangle "./init.el"
#+OPTIONS: toc:2

* Table of contents
:PROPERTIES:
:TOC:      :depth 2 :include all
:END:
:CONTENTS:
- [[#table-of-contents][Table of contents]]
- [[#preface][Preface]]
  - [[#package-infrastructure-initialization][Package infrastructure initialization]]
  - [[#set-up-use-package][Set-up use-package]]
- [[#aesthetics][Aesthetics]]
  - [[#theme][Theme]]
  - [[#font][Font]]
  - [[#rainbow-delimiters][Rainbow delimiters]]
  - [[#pretty-bullets][Pretty bullets]]
  - [[#ruler-at-80-characters][Ruler at 80 characters]]
  - [[#mode-line][Mode line]]
  - [[#miscellaneous][Miscellaneous]]
- [[#org-mode][Org Mode]]
  - [[#setup][Setup]]
- [[#python-ide-packages][Python IDE packages]]
  - [[#elpy][Elpy]]
  - [[#py-autopep8][py-autopep8]]
  - [[#blacken][Blacken]]
  - [[#flycheck][Flycheck]]
- [[#lsp][LSP]]
  - [[#lsp-mode][LSP-mode]]
- [[#various-ide-packages][Various IDE packages]]
  - [[#markdown-mode][markdown-mode]]
  - [[#yaml-mode][yaml-mode]]
  - [[#clojure-mode][Clojure mode]]
  - [[#emacs-neotree][emacs-neotree]]
  - [[#emacs-libvterm][emacs-libvterm]]
  - [[#magit][Magit]]
- [[#miscellaneous][Miscellaneous]]
  - [[#normal-copy-pasting-in-windows][Normal copy-pasting in Windows]]
  - [[#org-make-toc][org-make-toc]]
:END:
* Preface
Let be a chosen version of Emacs ~MM.m~, where ~MM~ stands for the major version and ~m~ for the minor version. As of writing this document, 28.1 is the chosen one.

For Windows, this guide assumes both ~emacs-{MM}-deps.zip~ and ~emacs-{MM.m}-no-deps.zip~ have been downloaded and unzipped, and the contents of the first one have been placed into the second one's ~bin~ directory (as per [[https://gist.github.com/okorz001/7715b40104ed0446bd228b40d7876674][this gist]]). Alternatively, and more easily, it can be installed via  ~emacs-28.1-installer.exe~.

Create ~init.el~ by tangling the contents of the code blocks: "C-c C-v t" (~org-babel-tangle~).
** Package infrastructure initialization
#+begin_src emacs-lisp
;; Enables basic package supporting
(require 'package)

;; Add several archives to list of available repositories
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
(add-to-list 'package-archives '("stable-melpa" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))

;; Initialize the package infrastructure
(package-initialize)
#+end_src
** Set-up ~use-package~
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(eval-when-compile (require 'use-package))
#+end_src
* Aesthetics
** Theme
I still haven't been able to figure out when to use ~use-package~ or ~load-theme~ in this context.
#+begin_src emacs-lisp
(use-package material-theme
  :ensure t
  :config (load-theme 'material t))
#+end_src
** Font
Absolutely always [[https://sourcefoundry.org/hack/][Hack]].
#+begin_src emacs-lisp
(custom-set-faces
  '(default ((t (:height 160 :family "Hack")))))
#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src
** Pretty bullets
[[https://github.com/sabof/org-bullets][org-bullets]] is a package that allows to substitute the asterisks in org-mode for UTF-8 characters. The availability of the bullets depends on how well UTF-8 is supported on the given machine that Emacs happens to be installed in, so ~org-bullets-bullet-list~ might vary from machine to machine. A searchable (and user-friendly) webpage that would make finding bullets more easy is available [[https://unicode-table.com/en/][here]].
#+begin_src emacs-lisp
(use-package org-bullets 
  :ensure t
  :config 
  (setq org-bullets-bullet-list '("○" "•" "·"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
)
#+end_src
** Ruler at 80 characters
~display-fill-column-indicator-mode~ was introduced with Emacs 27, so the version ought to be checked before adding the hook.
#+begin_src emacs-lisp
(if (version< "27.0" emacs-version)
    (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode))
#+end_src
** [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Mode-Line.html][Mode line]]
The following code chunk follows an incredibly helpful [[https://emacs-fu.blogspot.com/2011/08/customizing-mode-line.html][blog post]] from Emacs-fu.
#+begin_src emacs-lisp
(setq-default mode-line-format
  (list
    ;; The buffer name, equals file name
    '(:eval (propertize " %b" 'face 'font-lock-keyword-face 'help-echo (buffer-file-name)))

    " — "
      
    ;; Line and column
    "("
    (propertize "%02l" 'face 'font-lock-face-type)
    ","
    (propertize "%02c" 'face 'font-lock-face-type)
    ") "

    ;; Relative position, size of file
    (propertize "%p" 'face 'font-lock-constant-face)

    ;; Fill with dashes
    " — "

    ;; Major mode of buffer
    "["
    '(:eval (propertize "%m" 'face 'font-lock-string-face 'help-echo buffer-file-coding-system))
    "] "

    ;; Minor modes
    "["
    minor-mode-alist
    "]"

  ))
#+end_src
** Miscellaneous
Disable menu bar.
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src

Disable tool bar.
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

Hide startup message.
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

Hide splash screen.
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
#+end_src

Enable line numbers globally, format them, and add a solid vertical bar.
#+begin_src emacs-lisp
(global-linum-mode t)
(setq linum-format "%4d\u2502")
#+end_src
* Org Mode
** Setup
#+begin_src emacs-lisp
(use-package org
  :ensure t
  :mode ("\\.org$" . org-mode)
  :config
  (setq org-startup-truncated t)
  ;; Custom todo keyword sequence and colours
  (setq org-todo-keywords '((sequence
                            "TODO"
                            "IN-PROGRESS"
                            "WAITING"
                            "CANCELLED"
                            "DONE"))
        org-todo-keyword-faces '(("TODO" . "white")
                                 ("IN-PROGRESS" . "orange")
                                 ("WAITING" . "red")
                                 ("CANCELLED" . "black")
                                 ("DONE" . "green")))
  ;; Linking shortcuts
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c C-l") 'org-insert-link)
  (global-set-key (kbd "C-c a") 'org-agenda))
#+end_src
* Python IDE packages
** [[https://github.com/jorgenschaefer/elpy][Elpy]]
Emacs Python IDE, which I'm pretty sure I don't use it to its full extent.
#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :init (elpy-enable))
#+end_src
** [[https://github.com/paetzke/py-autopep8.el][py-autopep8]]
Format code upon save to comply with [[https://www.python.org/dev/peps/pep-0008/][PEP 8]].
#+begin_src emacs-lisp
(use-package py-autopep8
  :ensure t
  :config (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
#+end_src
** [[https://github.com/pythonic-emacs/blacken][Blacken]]
Code formatting by [[https://github.com/psf/black][black]].
#+begin_src emacs-lisp
(use-package blacken
  :ensure t
  :config 'blacken-mode)
#+end_src
** [[https://www.flycheck.org/en/latest/][Flycheck]]
Flycheck is not exclusive to Python, but it is set up only for it since I mainly develop in Python.
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode)))
#+end_src
* LSP
** [[https://emacs-lsp.github.io/lsp-mode/][LSP-mode]]
#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (python-mode . lsp)
         (clojure-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)

;; optionally if you want to use debugger
(use-package dap-mode :ensure t)
(use-package dap-python :ensure t) ;; to load the dap adapter for your language

;; optional if you want which-key integration
(use-package which-key
  :config
  (which-key-mode))
#+end_src
* Various IDE packages
** [[https://www.emacswiki.org/emacs/MarkdownMode][markdown-mode]]
#+begin_src emacs-lisp
(use-package markdown-mode :ensure t)
#+end_src
** [[https://github.com/yoshiki/yaml-mode][yaml-mode]]
#+begin_src emacs-lisp
(use-package yaml-mode :ensure t)
#+end_src
** [[https://github.com/clojure-emacs/clojure-mode/][Clojure mode]]
#+begin_src emacs-lisp
(use-package clojure-mode :ensure t)
#+end_src
** [[https://github.com/jaypei/emacs-neotree][emacs-neotree]]
#+begin_src emacs-lisp
(use-package neotree
  :ensure t
  :init
  (global-set-key [f8] 'neotree-toggle)
  (setq-default neo-show-hidden-files t))
#+end_src
** [[https://github.com/akermu/emacs-libvterm][emacs-libvterm]]
Terminal emulation using ~emacs-libvterm~. Requires a [[https://cmake.org/download/][CMake]] installation.
#+begin_src emacs-lisp
(use-package vterm :ensure t)
#+end_src
** [[https://magit.vc/][Magit]]
Requires [[https://git-scm.com/][Git]] to be installed and to be in the PATH environment variable.
#+begin_src emacs-lisp
(use-package magit :ensure t)
#+end_src
* Miscellaneous
** Normal copy-pasting in Windows
I believe copy-pasting (in the Emacs sense of it) stopped to working with Emacs 27. The following code block fixes it.
#+begin_src emacs-lisp
(if (eq system-type 'windows-nt)
    (progn
      (set-clipboard-coding-system 'utf-16-le)
      (set-selection-coding-system 'utf-16-le))
  (set-selection-coding-system 'utf-8))
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src
** [[https://github.com/alphapapa/org-make-toc][org-make-toc]]
As per the "Usage" section in the README of the link in the header of this subsection, follow the next steps to insert a basic TOC:
1. Choose a heading to contain a TOC and move the point to it.
2. Run command ~org-make-toc-insert~, which inserts a :CONTENTS: drawer and sets TOC properties. Set the include property to all.
3. Run the command ~org-make-toc~ to update all TOCs in the document.

Nevertheless, the second step I had to modify all reduce :PROPERTIES: to just ~:include all~ and ~:depth 2~.
#+begin_src emacs-lisp
(use-package org-make-toc :ensure t)
#+end_src
